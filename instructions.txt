*** Using Bluetooth with the Raspberry Pi ***

The following instructions show how to setup and use a USB Bluetooth adapter with the Raspberry Pi.
Please note that these instructions only apply to the latest Raspbian Jessie distribution. 
If you are using an older distribution (like Wheezy) some of the instructions will not work because the Bluetooth 
  implementation and utilities have changed with the Jessie release. 
A lot of the instructions I found online were relating to the older wheezy builds so it took some extra research 
  to find the correct way to do things with Jessie. 
There were also a few things I needed to do to work around some known issues/bugs relating to the 
  RFCOMM (serial over Bluetooth) communication on the Pi. 
I have documented all this and hopefully I can save you some time if you are trying to do a similar things. 
I tested this on a Raspberry Pi 2 using a USB Bluetooth 4.0 adapter with a Broadcom BCM20702 chip set but all this 
  should work any version of the Raspberry Pi as long as you are running the latest Raspbian Jessie distribution.


* First make sure your Pi is up to date:
Enter:
> sudo apt-get update
> sudo apt-get upgrade
> sudo rpi-update
> sudo reboot


* Insert your USB Bluetooth adapter into one of the USB ports on the Pi:
Enter:
> lsusb
You should see the output similar to the following:
< Bus 001 Device 00x: ID xxxx:xxxx Broadcom Corp.
If you do not see something similar to this it might mean that your Bluetooth adapter is not recognized/supported


* Install bluez and bluetooth manager packages:
Enter:
> sudo apt-get install bluetooth blueman bluez python-gobject python-gobject-2


* Check your adapter state:
Enter:
> sudo hciconfig
You should see output similar to the following:
BD Address: XX:XX:XX:XX:XX:XX
UP RUNNING PSCAN ISCAN
The [XX:XX:XX:XX:XX:XX] part is the MAC address of your Bluetooth adapter
If you do not see "UP RUNNING" enter the following to turn on Bluetooth:
Enter:
> sudo hciconfig hci0 up


* How to Pair Devices:
Enter:
> bluetoothctl
You should see a line similar to:
Controller XX:XX:XX:XX:XX:XX raspberrypi [default] (raspberrypi is the default name you will see when pairing/connecting to the Pi from other devices)
Enter:
> agent on
You should see:
< Agent Registered
Enter:
> default-agent
You should see:
< Default agent request successful
Enter:
> scan on
You should see:
< Discovery started
Enter:
> devices
Turn on your device and enter your device into pairing mode (this is device dependent)
You should see any devices that are found
< Device XX:XX:XX:XX:XX:XX [Device Name/Type]
Find find the MAC address of the device you want to pair (XX:XX:XX:XX:XX:XX)
Enter:
> pair [MAC ADDRESS] 
(substitute [MAC ADDRESS] with the MAC address of your device)
If your device requires a pin to pair enter the displayed pin next
You should ultimately see:
< Pairing successful
Enter:
> connect [MAC ADDRESS] 
(substitute [MAC ADDRESS] with the MAC address of your device)
You should ultimately see:
< Connection successful
You can see a list of all paired devices:
Enter:
> paired-devices
You should see your device(s) listed
If you want to automatically connect to a device you need to trust it:
Enter:
> trust [MAC ADDRESS] 
(substitute [MAC ADDRESS] with the MAC address of your device)
You should see:
< Changing XX:XX:XX:XX:XX:XX trust succeeded
Exit bluetoothctl:
Enter:
> quit


* How to setup and use a Bluetooth speaker/headphones:
Enter:
> sudo apt-get install pulseaudio pulseaudio-module-bluetooth pavucontrol bluez-firmware
Install mplayer package:
Enter:
> sudo apt-get install mplayer
To play an audio file on a connected Bluetooth device:
Enter:
> mplayer -ao pulse [file.mp3]
(substitute [file.mp3] with the path of the audio file to stream)
Your audio file will be streamed to the Bluetooth speaker/headphones


* Setup a Bluetooth serial port to communicate with an Android phone:
First pair your Android phone with the pi using the paring instructions above
Install blueterm app on your andriod device from the Google play store 
https://play.google.com/store/apps/details?id=es.pymasde.blueterm&hl=en
Important Bug Fix:
Enter:
 > sudo nano /etc/bluetooth/main.conf
 go to bottom of file and add the following line of text: 
 DisablePlugins = pnat
 then save and exit (Ctrl-O Ctrl-X)
Setup Serial Port:
Enter:
> sdptool add sp
Listen for connections on the serial port:
Enter:
> sudo rfcomm listen hcio&
You should see the following:
< Waiting for connection on channel 1
Connect to the Pi from the blueterm app on your Android phone:
  open the blueterm app on your Android phone
  press three dot bottom on bottom right corner of the blueterm app screen
  select "Connect device"
  choose the already paired 'raspberrypi' from the list of paired devices
  the blueterm app should nor be connected to your Pi
Echo what is received to the Pi Terminal:
Enter:
> cat /dev/rfcomm0
Now you can type something in the bluterm app and you should see it echoed to your Pi terminal


* Run a Python RFCOMM Server on the Pi and make an Android App that will send instructions to the Pi to turn on/off a LED:
First make sure that you can connect and echo text using the blueterm app (instructions above)
Install the python Bluetooth package:
Enter:
> sudo apt-get install python-bluez
Important bug fix:
Enter:
> sudo /lib/systemd/system/bluetooth.service
Change following line:
ExecStart=/usr/lib/bluetooth/bluetoothd
To the following:
ExecStart=/usr/lib/bluetooth/bluetoothd --compat

* Run the Python RFCOMM Server Script 
Change directory to where the pi-rfcomm.py script is located 
(pi-rfcomm.py can be found in the /RaspberryPi directory of this repo)
Enter:
> sudo python pi-rfcomm.py
The Python RFCOMM server side is now running

* Build and run the Android Application found in the /Android directory of this repo
This is an android studio project but you can build and run the app on your device in any way you prefer
The important files are:
/Android/app/src/main/AndroidManifest.xml
/Android/app/src/main/java/net/clopresti/rpibluetooth/MainActivity.java
/Android/app/src/main/res/layout/activity_main.xml
/Android/app/src/main/res/layout/content_main.xml

Once the App is built and running on your Android device you can click the "connect" button 
On the Pi side you should see "Connection from: (...)" and you are now connected to the Pi
Press the "on"/"off" toggle button
On the Pi side you should see "Received [on]" "Received [off]" messages as you toggle the button
If you connect an LED to your Pi (pin 7 on the Pi 2) you will be able to toggle the LED on/off using your Android phone